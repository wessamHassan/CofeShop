@page "/products/{Name}"

@inject HttpClient http
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager

@if (Name.Equals("-"))
{
    <p><em>Please Login First...</em></p>
}
else
{
<h1 class="text-center">Welcome @Name </h1>
<div class="container">

    <div class="row">


        @if (products == null || products.Length == 0)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            foreach (var product in products)
            {
                <div class="col-sm-4 p-2 ">
                    <div class="card">
                        <div class="d-flex justify-content-center p-2">
                            <img src="img/@product.ImageUrl" height="150" width="235" />
                        </div>
                        <div class="card-body">
                            <table>
                                <tr>
                                    <td>
                                        <h5 class="card-title">@product.Name</h5>

                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <h8 class="card-text">@product.Description </h8>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p class="text-secondary text-center h2 font-weight-bold">
                                            @product.Price SEK
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <select id="cont" @onchange="CountSelected">
                                            @for (int i = 0; i < 10; i++)
                                            {
                                                <option value="@i-@product.Id">@i</option>

                                            }

                                        </select>
                                    </td>
                                </tr>
                            </table>


                        </div>
                    </div>
                </div>
            }
        }




    </div>

    <button style="background-color :#a83d0c" class="btn btn-success" @onclick="CalcPrice">Order</button>


</div>
}
@code{
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter] public string Name { get; set; }
    List<Order> orders = new List<Order>();
    Product[] products { get; set; }
    Order order;
    List<decimal> prices = new List<decimal>();
    bool orderDone = false;
    //List<OrderDto> ordersList;

    //protected override void OnInitialized()
    //{
    //    if (Name.Equals("-"))
    //        Name = Layout.Name;
    //    else
    //        Layout.Name = Name;
    //}
    protected override async Task OnInitializedAsync()
    {
        if (Name.Equals("-"))
            Name = Layout.Name;
        else
            Layout.Name = Name;
        //Console.WriteLine("xxxx" + Layout.Name);
        products = await http.GetFromJsonAsync<Product[]>("api/Product");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        //base.OnAfterRender(firstRender);
        if (firstRender)
        {

            //Layout.HasRendered = true;
            StateHasChanged();

        }
        base.OnAfterRender(firstRender);
        //else
        //{
        //    if (Name.Equals("-"))
        //        Name = Layout.Name;
        //    else
        //        Layout.Name = Name;
        //}

    }
    void CountSelected(ChangeEventArgs e)
    {
        order = new Order();

        string selected = e.Value.ToString();

        if (!string.IsNullOrEmpty(selected))
        {
            string[] splitedSelect = selected.Split('-');

            int count = int.Parse(splitedSelect[0]);
            int pid = int.Parse(splitedSelect[1]);


            var temp = orders.FirstOrDefault(x => x.ProductId == pid);
            if (temp != null)
            {
                orders.Remove(temp);
            }

            order.Count = count;
            order.ProductId = pid;
            orders.Add(order);





        }

    }

    async Task CalcPrice()
    {

        if (orders.Count > 0)
        {
            await http.PostAsJsonAsync("api/Order", orders);
            navigationManager.NavigateTo("/orderView/" + Name);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please choose order first!"); // Alert
        }

    }

}