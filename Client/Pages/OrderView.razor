@page "/orderView/{Name}"

@inject HttpClient http
@inject NavigationManager navigationManager

<h1 class="text-center"> @Name Order</h1>
<br />
<div class="container">

    <div class="row">

        @if (orders == null || orders.Length == 0)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div>
                <table class="table-bordered align-content-center"  >
                    <tr>
                        <th>Item name</th>
                        <th colspan="10" style="margin-left: 2.5em">Unit Price</th>
                        <th colspan="3">Count</th>
                        <th>Total price</th>
                    </tr>
                    @foreach (var order in orders)
                    {
                        <tr>

                            <td>
                                @order.ItemName

                            </td>
                            <td colspan="10" style=" text-align:center">
                                @order.UnitPrice
                            </td>
                            <td colspan="3" style="text-align:center">
                                @order.CountPerItem
                            </td>
                            <td style="text-align:center">
                                @order.TotalPricePerItem
                            </td>
                        </tr>
                    }
                </table>

            </div>


        
        }



    </div>
    <div class="row ">
        <div class="col-md-3"></div>
        <div class="col-md-9">
            <h5 class="font-weight-bold text-right">Total Price : @total SEK</h5>
        </div>
    </div>
    <div class="row"></div>
    <div class="row float-right">
        <button style="background-color :#a83d0c" class="btn btn-success" @onclick="Delete">Order</button>
    </div>

    </div>

@code{

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter] public string Name { get; set; }

    OrderDto[] orders { get; set; }
    decimal total = 0;


    protected override async Task OnInitializedAsync()
    {
        orders = await http.GetFromJsonAsync<OrderDto[]>("api/Order");

        foreach(var order in orders)
        {
            total += order.TotalPricePerItem;
        }

    }
    async Task Delete()
    {
        foreach (var order in orders)
            await http.DeleteAsync($"api/Order/{order.Id}");
        navigationManager.NavigateTo("/products/"+Name);
    }

}